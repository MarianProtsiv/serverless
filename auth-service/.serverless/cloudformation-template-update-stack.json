{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "The AWS CloudFormation template for this Serverless application",
  "Resources": {
    "ServerlessDeploymentBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "ServerSideEncryptionByDefault": {
                "SSEAlgorithm": "AES256"
              }
            }
          ]
        }
      }
    },
    "ServerlessDeploymentBucketPolicy": {
      "Type": "AWS::S3::BucketPolicy",
      "Properties": {
        "Bucket": {
          "Ref": "ServerlessDeploymentBucket"
        },
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "s3:*",
              "Effect": "Deny",
              "Principal": "*",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "ServerlessDeploymentBucket"
                      },
                      "/*"
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "ServerlessDeploymentBucket"
                      }
                    ]
                  ]
                }
              ],
              "Condition": {
                "Bool": {
                  "aws:SecureTransport": false
                }
              }
            }
          ]
        }
      }
    },
    "AuthLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/auth-service-dev-auth"
      }
    },
    "PublicEndpointLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/auth-service-dev-publicEndpoint"
      }
    },
    "PrivateEndpointLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/auth-service-dev-privateEndpoint"
      }
    },
    "IamRoleLambdaExecution": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": {
              "Fn::Join": [
                "-",
                [
                  "auth-service",
                  "dev",
                  "lambda"
                ]
              ]
            },
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogStream",
                    "logs:CreateLogGroup"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/auth-service-dev*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:PutLogEvents"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/auth-service-dev*:*:*"
                    }
                  ]
                }
              ]
            }
          }
        ],
        "Path": "/",
        "RoleName": {
          "Fn::Join": [
            "-",
            [
              "auth-service",
              "dev",
              {
                "Ref": "AWS::Region"
              },
              "lambdaRole"
            ]
          ]
        }
      }
    },
    "AuthLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/auth-service/dev/1614167608990-2021-02-24T11:53:28.990Z/auth-service.zip"
        },
        "Handler": "src/handlers/auth.handler",
        "Runtime": "nodejs12.x",
        "FunctionName": "auth-service-dev-auth",
        "MemorySize": 128,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "AUTH0_PUBLIC_KEY": "-----BEGIN CERTIFICATE-----\nMIIDBTCCAe2gAwIBAgIJPN/P5bdH/YF4MA0GCSqGSIb3DQEBCwUAMCAxHjAcBgNV\nBAMTFXRlc3Qtc2xzLmV1LmF1dGgwLmNvbTAeFw0yMTAyMjQxMDI2MjNaFw0zNDEx\nMDMxMDI2MjNaMCAxHjAcBgNVBAMTFXRlc3Qtc2xzLmV1LmF1dGgwLmNvbTCCASIw\nDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAOedwNBht9kYyOmZ4gKiyFj29t1r\n7fN5KXhpITWQjE5Ak6YaxzUAlhjZizy/HSR0HoJ1l8xkCmtTX1ZdphFnF+VsdzTe\nnQlcg46XoQ3CWUNAd8fSmeMqVCTV8IpSvVUeACH0TQm7GBc1zAwLZqCv+uiFhkc9\nxSdBJEn5zOI70LD7kFIegNQ73xN7203mCD6e4FfqO/Lr8YoeiJ2TR5RkKbCmueBO\nuUK8EIsPiKaQmPZcHbCppXgKYaEYfunP0Jl4/lLGEIwhTMlL2h3618Ym3KXH7iUR\noNtA1p8NcwtTzhow52/+nUa7R9zVwkKbp1qv3OpeaPllW5uevODSprLZJx0CAwEA\nAaNCMEAwDwYDVR0TAQH/BAUwAwEB/zAdBgNVHQ4EFgQUwcWjIm8fg5g+nZWboG1y\n6wTCxZUwDgYDVR0PAQH/BAQDAgKEMA0GCSqGSIb3DQEBCwUAA4IBAQCNwcmSSQN9\ndhklYz7IKu6cY5NcUdPd4+8KLcsWjz6dLQqFj6kNpw4g61f1oQbh47Vf7Z1U9R9E\nhg1cHnt/K4VvcCUr5MegPh12NVordq3GOSr3cNiOrMQ+MAx1P2itXzFcKsuhFZue\npMsWxGwiDipVfeEQlHutU1UUzKzG6agi91zlwR+HwLpp/4roPH6HUfLumBl34BKR\nDRkbInLcfsgT4HPkZWm4CsKU1rEyMzz1aAfYDgd1deEQcYM32+i86Z1mM/n2lWHb\nPIC66wU+p7aVsJ7q06s2tm9PT7lBc3c9vtb5WPwScFzIA6sYHNeUdbgGnNillVS4\ntUTvld8FaKVv\n-----END CERTIFICATE-----"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "AuthLogGroup"
      ]
    },
    "PublicEndpointLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/auth-service/dev/1614167608990-2021-02-24T11:53:28.990Z/auth-service.zip"
        },
        "Handler": "src/handlers/public.handler",
        "Runtime": "nodejs12.x",
        "FunctionName": "auth-service-dev-publicEndpoint",
        "MemorySize": 128,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "AUTH0_PUBLIC_KEY": "-----BEGIN CERTIFICATE-----\nMIIDBTCCAe2gAwIBAgIJPN/P5bdH/YF4MA0GCSqGSIb3DQEBCwUAMCAxHjAcBgNV\nBAMTFXRlc3Qtc2xzLmV1LmF1dGgwLmNvbTAeFw0yMTAyMjQxMDI2MjNaFw0zNDEx\nMDMxMDI2MjNaMCAxHjAcBgNVBAMTFXRlc3Qtc2xzLmV1LmF1dGgwLmNvbTCCASIw\nDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAOedwNBht9kYyOmZ4gKiyFj29t1r\n7fN5KXhpITWQjE5Ak6YaxzUAlhjZizy/HSR0HoJ1l8xkCmtTX1ZdphFnF+VsdzTe\nnQlcg46XoQ3CWUNAd8fSmeMqVCTV8IpSvVUeACH0TQm7GBc1zAwLZqCv+uiFhkc9\nxSdBJEn5zOI70LD7kFIegNQ73xN7203mCD6e4FfqO/Lr8YoeiJ2TR5RkKbCmueBO\nuUK8EIsPiKaQmPZcHbCppXgKYaEYfunP0Jl4/lLGEIwhTMlL2h3618Ym3KXH7iUR\noNtA1p8NcwtTzhow52/+nUa7R9zVwkKbp1qv3OpeaPllW5uevODSprLZJx0CAwEA\nAaNCMEAwDwYDVR0TAQH/BAUwAwEB/zAdBgNVHQ4EFgQUwcWjIm8fg5g+nZWboG1y\n6wTCxZUwDgYDVR0PAQH/BAQDAgKEMA0GCSqGSIb3DQEBCwUAA4IBAQCNwcmSSQN9\ndhklYz7IKu6cY5NcUdPd4+8KLcsWjz6dLQqFj6kNpw4g61f1oQbh47Vf7Z1U9R9E\nhg1cHnt/K4VvcCUr5MegPh12NVordq3GOSr3cNiOrMQ+MAx1P2itXzFcKsuhFZue\npMsWxGwiDipVfeEQlHutU1UUzKzG6agi91zlwR+HwLpp/4roPH6HUfLumBl34BKR\nDRkbInLcfsgT4HPkZWm4CsKU1rEyMzz1aAfYDgd1deEQcYM32+i86Z1mM/n2lWHb\nPIC66wU+p7aVsJ7q06s2tm9PT7lBc3c9vtb5WPwScFzIA6sYHNeUdbgGnNillVS4\ntUTvld8FaKVv\n-----END CERTIFICATE-----"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "PublicEndpointLogGroup"
      ]
    },
    "PrivateEndpointLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/auth-service/dev/1614167608990-2021-02-24T11:53:28.990Z/auth-service.zip"
        },
        "Handler": "src/handlers/private.handler",
        "Runtime": "nodejs12.x",
        "FunctionName": "auth-service-dev-privateEndpoint",
        "MemorySize": 128,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "AUTH0_PUBLIC_KEY": "-----BEGIN CERTIFICATE-----\nMIIDBTCCAe2gAwIBAgIJPN/P5bdH/YF4MA0GCSqGSIb3DQEBCwUAMCAxHjAcBgNV\nBAMTFXRlc3Qtc2xzLmV1LmF1dGgwLmNvbTAeFw0yMTAyMjQxMDI2MjNaFw0zNDEx\nMDMxMDI2MjNaMCAxHjAcBgNVBAMTFXRlc3Qtc2xzLmV1LmF1dGgwLmNvbTCCASIw\nDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAOedwNBht9kYyOmZ4gKiyFj29t1r\n7fN5KXhpITWQjE5Ak6YaxzUAlhjZizy/HSR0HoJ1l8xkCmtTX1ZdphFnF+VsdzTe\nnQlcg46XoQ3CWUNAd8fSmeMqVCTV8IpSvVUeACH0TQm7GBc1zAwLZqCv+uiFhkc9\nxSdBJEn5zOI70LD7kFIegNQ73xN7203mCD6e4FfqO/Lr8YoeiJ2TR5RkKbCmueBO\nuUK8EIsPiKaQmPZcHbCppXgKYaEYfunP0Jl4/lLGEIwhTMlL2h3618Ym3KXH7iUR\noNtA1p8NcwtTzhow52/+nUa7R9zVwkKbp1qv3OpeaPllW5uevODSprLZJx0CAwEA\nAaNCMEAwDwYDVR0TAQH/BAUwAwEB/zAdBgNVHQ4EFgQUwcWjIm8fg5g+nZWboG1y\n6wTCxZUwDgYDVR0PAQH/BAQDAgKEMA0GCSqGSIb3DQEBCwUAA4IBAQCNwcmSSQN9\ndhklYz7IKu6cY5NcUdPd4+8KLcsWjz6dLQqFj6kNpw4g61f1oQbh47Vf7Z1U9R9E\nhg1cHnt/K4VvcCUr5MegPh12NVordq3GOSr3cNiOrMQ+MAx1P2itXzFcKsuhFZue\npMsWxGwiDipVfeEQlHutU1UUzKzG6agi91zlwR+HwLpp/4roPH6HUfLumBl34BKR\nDRkbInLcfsgT4HPkZWm4CsKU1rEyMzz1aAfYDgd1deEQcYM32+i86Z1mM/n2lWHb\nPIC66wU+p7aVsJ7q06s2tm9PT7lBc3c9vtb5WPwScFzIA6sYHNeUdbgGnNillVS4\ntUTvld8FaKVv\n-----END CERTIFICATE-----"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "PrivateEndpointLogGroup"
      ]
    },
    "AuthLambdaVersionjDIJg6paQYVqWWUVTSMkzTw5HEZS1pZd5aaATE3C9s": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "AuthLambdaFunction"
        },
        "CodeSha256": "kCgGIXEgfoywfDmOAoF/WmP0WhJLNdUT8nY8KbDA3Rw="
      }
    },
    "PrivateEndpointLambdaVersionTpPSSRtZc270ZZRPYenjyM4tyoJ9jvumHRMvPTiCeyM": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "PrivateEndpointLambdaFunction"
        },
        "CodeSha256": "kCgGIXEgfoywfDmOAoF/WmP0WhJLNdUT8nY8KbDA3Rw="
      }
    },
    "PublicEndpointLambdaVersiont8mDFlCY3o3dDMDHATYJMHAShk8NN3uJwanIaUcTejQ": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "PublicEndpointLambdaFunction"
        },
        "CodeSha256": "kCgGIXEgfoywfDmOAoF/WmP0WhJLNdUT8nY8KbDA3Rw="
      }
    },
    "ApiGatewayRestApi": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Name": "dev-auth-service",
        "EndpointConfiguration": {
          "Types": [
            "EDGE"
          ]
        },
        "Policy": ""
      }
    },
    "ApiGatewayResourcePublic": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "public",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourcePrivate": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "private",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodPublicOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
              },
              "ResponseTemplates": {
                "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".+\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourcePublic"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodPrivateOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
              },
              "ResponseTemplates": {
                "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".+\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourcePrivate"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodPublicPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourcePublic"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "PublicEndpointLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      }
    },
    "ApiGatewayMethodPrivatePost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourcePrivate"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "CUSTOM",
        "AuthorizerId": {
          "Ref": "AuthApiGatewayAuthorizer"
        },
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "PrivateEndpointLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": "AuthApiGatewayAuthorizer"
    },
    "AuthApiGatewayAuthorizer": {
      "Type": "AWS::ApiGateway::Authorizer",
      "Properties": {
        "IdentitySource": "method.request.header.Authorization",
        "Name": "auth",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "AuthorizerUri": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":apigateway:",
              {
                "Ref": "AWS::Region"
              },
              ":lambda:path/2015-03-31/functions/",
              {
                "Fn::GetAtt": [
                  "AuthLambdaFunction",
                  "Arn"
                ]
              },
              "/invocations"
            ]
          ]
        },
        "Type": "TOKEN"
      }
    },
    "ApiGatewayDeployment1614167603905": {
      "Type": "AWS::ApiGateway::Deployment",
      "Properties": {
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "StageName": "dev"
      },
      "DependsOn": [
        "ApiGatewayMethodPublicOptions",
        "ApiGatewayMethodPrivateOptions",
        "ApiGatewayMethodPublicPost",
        "ApiGatewayMethodPrivatePost"
      ]
    },
    "PublicEndpointLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "PublicEndpointLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "PrivateEndpointLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "PrivateEndpointLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "AuthLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "AuthLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "GatewayResponse": {
      "Type": "AWS::ApiGateway::GatewayResponse",
      "Properties": {
        "ResponseParameters": {
          "gatewayresponse.header.Access-Control-Allow-Origin": "'*'",
          "gatewayresponse.header.Access-Control-Allow-Headers": "'*'"
        },
        "ResponseType": "EXPIRED_TOKEN",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "StatusCode": "401"
      }
    },
    "AuthFailureGatewayResponse": {
      "Type": "AWS::ApiGateway::GatewayResponse",
      "Properties": {
        "ResponseParameters": {
          "gatewayresponse.header.Access-Control-Allow-Origin": "'*'",
          "gatewayresponse.header.Access-Control-Allow-Headers": "'*'"
        },
        "ResponseType": "UNAUTHORIZED",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "StatusCode": "401"
      }
    }
  },
  "Outputs": {
    "ServerlessDeploymentBucketName": {
      "Value": {
        "Ref": "ServerlessDeploymentBucket"
      }
    },
    "AuthLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "AuthLambdaVersionjDIJg6paQYVqWWUVTSMkzTw5HEZS1pZd5aaATE3C9s"
      }
    },
    "PrivateEndpointLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "PrivateEndpointLambdaVersionTpPSSRtZc270ZZRPYenjyM4tyoJ9jvumHRMvPTiCeyM"
      }
    },
    "PublicEndpointLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "PublicEndpointLambdaVersiont8mDFlCY3o3dDMDHATYJMHAShk8NN3uJwanIaUcTejQ"
      }
    },
    "ServiceEndpoint": {
      "Description": "URL of the service endpoint",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "ApiGatewayRestApi"
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region"
            },
            ".",
            {
              "Ref": "AWS::URLSuffix"
            },
            "/dev"
          ]
        ]
      }
    }
  }
}
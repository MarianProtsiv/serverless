{"ast":null,"code":"import _initializerDefineProperty from \"/Users/macbook/serverless/sls-course-frontend/node_modules/@babel/runtime/helpers/esm/initializerDefineProperty\";\nimport _applyDecoratedDescriptor from \"/Users/macbook/serverless/sls-course-frontend/node_modules/@babel/runtime/helpers/esm/applyDecoratedDescriptor\";\nimport _initializerWarningHelper from \"/Users/macbook/serverless/sls-course-frontend/node_modules/@babel/runtime/helpers/esm/initializerWarningHelper\";\n\nvar _class, _descriptor, _descriptor2, _descriptor3, _temp;\n\nimport { action, observable } from 'mobx';\nimport Axios from 'axios';\nimport AuthStore from './AuthStore';\nimport OverlayStore from './OverlayStore';\nconst axios = Axios.create({\n  baseURL: process.env.REACT_APP_AUCTIONS_ENDPOINT\n});\nlet AuctionStore = (_class = (_temp = class AuctionStore {\n  constructor() {\n    _initializerDefineProperty(this, \"auctions\", _descriptor, this);\n\n    _initializerDefineProperty(this, \"biddingOn\", _descriptor2, this);\n\n    _initializerDefineProperty(this, \"bidAmount\", _descriptor3, this);\n  }\n\n  async fetchAuctions() {\n    try {\n      const result = await axios.get('/auctions?status=OPEN', {\n        headers: {\n          Authorization: AuthStore.token\n        }\n      });\n      this.auctions = result.data;\n    } catch (error) {\n      alert('Could not fetch auctions! Check console for more details.');\n      console.error(error);\n    }\n\n    if (this.biddingOn) {\n      this.auctions.forEach(auction => {\n        if (auction.id === this.biddingOn.id) {\n          this.bidAmount = auction.highestBid.amount + 1;\n        }\n      });\n    }\n  }\n\n  setBiddingOn(auction) {\n    this.biddingOn = auction;\n\n    if (auction) {\n      this.bidAmount = auction.highestBid.amount + 1;\n    } else {\n      this.bidAmount = 0;\n    }\n  }\n\n  setBidAmount(amount) {\n    this.bidAmount = amount;\n  }\n\n  async placeBid() {\n    const id = this.biddingOn.id;\n    const amount = this.bidAmount;\n    OverlayStore.setLoadingSpinner(true);\n\n    try {\n      await axios.patch(`/auction/${id}/bid`, {\n        amount\n      }, {\n        headers: {\n          Authorization: AuthStore.token\n        }\n      });\n    } catch (error) {\n      alert('Could not place bid! Check console for more details.');\n      console.error(error);\n    }\n\n    this.fetchAuctions();\n    this.biddingOn = null;\n    this.bidAmount = 0;\n    OverlayStore.setLoadingSpinner(false);\n  }\n\n  async createAuction(title, pictureBase64) {\n    let auctionId;\n    OverlayStore.setLoadingSpinner(true);\n\n    try {\n      const createAuctionResult = await axios.post('/auction', {\n        title\n      }, {\n        headers: {\n          Authorization: AuthStore.token\n        }\n      });\n      const auction = createAuctionResult.data;\n      auctionId = auction.id;\n      await axios.patch(`/auction/${auctionId}/picture`, pictureBase64, {\n        headers: {\n          Authorization: AuthStore.token\n        }\n      });\n    } catch (error) {\n      alert('Could not create auction! Check console for more details.');\n      console.error(error);\n    }\n\n    OverlayStore.setLoadingSpinner(false);\n  }\n\n}, _temp), (_descriptor = _applyDecoratedDescriptor(_class.prototype, \"auctions\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return [];\n  }\n}), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, \"biddingOn\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return null;\n  }\n}), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, \"bidAmount\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return 0;\n  }\n}), _applyDecoratedDescriptor(_class.prototype, \"fetchAuctions\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"fetchAuctions\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"setBiddingOn\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"setBiddingOn\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"setBidAmount\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"setBidAmount\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"placeBid\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"placeBid\"), _class.prototype)), _class);\nexport default new AuctionStore();","map":{"version":3,"sources":["/Users/macbook/serverless/sls-course-frontend/src/stores/AuctionStore.js"],"names":["action","observable","Axios","AuthStore","OverlayStore","axios","create","baseURL","process","env","REACT_APP_AUCTIONS_ENDPOINT","AuctionStore","fetchAuctions","result","get","headers","Authorization","token","auctions","data","error","alert","console","biddingOn","forEach","auction","id","bidAmount","highestBid","amount","setBiddingOn","setBidAmount","placeBid","setLoadingSpinner","patch","createAuction","title","pictureBase64","auctionId","createAuctionResult","post"],"mappings":"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","sourcesContent":["import { action, observable } from 'mobx';\nimport Axios from 'axios';\nimport AuthStore from './AuthStore';\nimport OverlayStore from './OverlayStore';\n\nconst axios = Axios.create({\n  baseURL: process.env.REACT_APP_AUCTIONS_ENDPOINT,\n});\n\nclass AuctionStore {\n  @observable auctions = [];\n  @observable biddingOn = null;\n  @observable bidAmount = 0;\n\n  @action\n  async fetchAuctions() {\n    try {\n      const result = await axios.get('/auctions?status=OPEN', {\n        headers: {\n          Authorization: AuthStore.token,\n        }\n      });\n\n      this.auctions = result.data;\n    } catch (error) {\n      alert('Could not fetch auctions! Check console for more details.');\n      console.error(error);\n    }\n\n    if (this.biddingOn) {\n      this.auctions.forEach(auction => {\n        if (auction.id === this.biddingOn.id) {\n          this.bidAmount = auction.highestBid.amount + 1;\n        }\n      });\n    }\n  }\n\n  @action\n  setBiddingOn(auction) {\n    this.biddingOn = auction;\n\n    if (auction) {\n      this.bidAmount = auction.highestBid.amount + 1;\n    } else {\n      this.bidAmount = 0;\n    }\n  }\n\n  @action\n  setBidAmount(amount) {\n    this.bidAmount = amount;\n  }\n\n  @action\n  async placeBid() {\n    const id = this.biddingOn.id;\n    const amount = this.bidAmount;\n\n    OverlayStore.setLoadingSpinner(true);\n\n    try {\n      await axios.patch(`/auction/${id}/bid`, { amount }, {\n        headers: {\n          Authorization: AuthStore.token,\n        }\n      });\n    } catch (error) {\n      alert('Could not place bid! Check console for more details.');\n      console.error(error);\n    }\n\n    this.fetchAuctions();\n    this.biddingOn = null;\n    this.bidAmount = 0;\n    OverlayStore.setLoadingSpinner(false);\n  }\n\n  async createAuction(title, pictureBase64) {\n    let auctionId;\n    OverlayStore.setLoadingSpinner(true);\n\n    try {\n      const createAuctionResult = await axios.post('/auction', { title }, {\n        headers: {\n          Authorization: AuthStore.token,\n        }\n      });\n      \n      const auction = createAuctionResult.data;\n      auctionId = auction.id;\n      \n      await axios.patch(`/auction/${auctionId}/picture`, pictureBase64, {\n        headers: {\n          Authorization: AuthStore.token,\n        },\n      });\n    } catch (error) {\n      alert('Could not create auction! Check console for more details.');\n      console.error(error);\n    }\n\n    OverlayStore.setLoadingSpinner(false);\n  }\n}\n\nexport default new AuctionStore();"]},"metadata":{},"sourceType":"module"}